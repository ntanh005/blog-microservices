# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

version: '3.9'
x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

networks:
  default:
    name: opentelemetry-demo
    driver: bridge

services:
  blog:
    build:
      context: ./src/blog/
    container_name: blog
    image: blog:0.0.1
    environment:
      - AD_SERVICE_PORT
      - FLAGD_HOST
      - FLAGD_PORT
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_HTTP}
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_SERVICE_NAME=blog-service
    ports:
      - "9091:9091"
    depends_on:
      otelcol:
        condition: service_started
    logging: *logging
  notification:
    build:
      context: ./src/notification/
    container_name: notification
    image: notification:0.0.1
    environment:
      - AD_SERVICE_PORT
      - FLAGD_HOST
      - FLAGD_PORT
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_HTTP}
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_SERVICE_NAME=notification-service
    ports:
      - "9092:9092"
    depends_on:
      otelcol:
        condition: service_started
    logging: *logging
  # # AdService
  # adservice:
  #   image: ${IMAGE_NAME}:${DEMO_VERSION}-adservice
  #   container_name: ad-service
  #   build:
  #     context: ./
  #     dockerfile: ./src/adservice/Dockerfile
  #     cache_from:
  #       - ${IMAGE_NAME}:${IMAGE_VERSION}-adservice
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 300M
  #   restart: unless-stopped
  #   ports:
  #     - "${AD_SERVICE_PORT}"
  #   environment:
  #     - AD_SERVICE_PORT
  #     - FLAGD_HOST
  #     - FLAGD_PORT
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_HTTP}
  #     - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
  #     - OTEL_RESOURCE_ATTRIBUTES
  #     - OTEL_LOGS_EXPORTER=otlp
  #     - OTEL_SERVICE_NAME=adservice
  #   depends_on:
  #     otelcol:
  #       condition: service_started
  #     flagd:
  #       condition: service_started
  #   logging: *logging

  # flagd:
  #   image: ghcr.io/open-feature/flagd:v0.9.0
  #   container_name: flagd
  #   command: [
  #     "start",
  #     "--uri",
  #     "file:./etc/flagd/demo.flagd.json"
  #     ]
  #   ports:
  #     - 8013
  #   volumes:
  #     - ./src/flagd:/etc/flagd
  #   logging:
  #     *logging

  # Frontend Proxy (Envoy)
  frontendproxy:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-frontendproxy
    container_name: frontend-proxy
    build:
      context: ./
      dockerfile: src/frontendproxy/Dockerfile
    deploy:
      resources:
        limits:
          memory: 50M
    restart: unless-stopped
    ports:
      - "${ENVOY_PORT}:${ENVOY_PORT}"
      - 10000:10000
    environment:
      - FRONTEND_PORT
      - FRONTEND_HOST
      - LOCUST_WEB_HOST
      - LOCUST_WEB_PORT
      - GRAFANA_SERVICE_PORT
      - GRAFANA_SERVICE_HOST
      - JAEGER_SERVICE_PORT
      - JAEGER_SERVICE_HOST
      - OTEL_COLLECTOR_HOST
      - OTEL_COLLECTOR_PORT_GRPC
      - OTEL_COLLECTOR_PORT_HTTP
      - OTEL_RESOURCE_ATTRIBUTES
      - ENVOY_PORT
    depends_on:
      jaeger:
        condition: service_started
      grafana:
        condition: service_started

  # ********************
  # Telemetry Components
  # ********************
  # Jaeger
  jaeger:
    image: ${JAEGERTRACING_IMAGE}
    container_name: jaeger
    command:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=http://${PROMETHEUS_ADDR}"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    deploy:
      resources:
        limits:
          memory: 400M
    restart: unless-stopped
    ports:
      - "${JAEGER_SERVICE_PORT}"         # Jaeger UI
      - "${OTEL_COLLECTOR_PORT_GRPC}"
    environment:
      - METRICS_STORAGE_TYPE=prometheus
    logging: *logging

  # Grafana
  grafana:
    image: ${GRAFANA_IMAGE}
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    environment:
      - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
    volumes:
      - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./src/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_SERVICE_PORT}"
    logging: *logging

  # OpenTelemetry Collector
  otelcol:
    image: ${COLLECTOR_CONTRIB_IMAGE}
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./src/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
      - ./src/otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    ports:
      - "${OTEL_COLLECTOR_PORT_GRPC}"
      - "${OTEL_COLLECTOR_PORT_HTTP}"
    depends_on:
      - jaeger
    logging: *logging
    environment:
      - ENVOY_PORT

  # Prometheus
  prometheus:
    image: ${PROMETHEUS_IMAGE}
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
    volumes:
      - ./src/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
    logging: *logging

  # OpenSearch
  opensearch:
    image: ${OPENSEARCH_IMAGE}
    container_name: opensearch
    deploy:
      resources:
        limits:
          memory: 1G
    restart: unless-stopped
    environment:
      - cluster.name=demo-cluster
      - node.name=demo-node
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms300m -Xmx300m
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    logging: *logging
